/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca1.gui;

import ca1.client.Client;
import ca1.client.ClientReading;
import ca1.client.ClientWriting;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.Observable;
import java.util.Observer;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Hannibal
 */
public class newGui extends javax.swing.JFrame implements Observer{

    private OutputStream output = null;
    private PrintWriter writer = null;
    private BufferedReader reader = null;
    private String userName, msg;
    public static String input;
    private boolean active = false;
    private Client client;
    ExecutorService exec;
    ClientReading clientreading;
    ClientWriting clientwriting;
    private int enterCounter = 0;
    /**
     * Creates new form newGui
     */
    public newGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                EnterButtonPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Please enter a username");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EnterButtonPerformed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_EnterButtonPerformed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if(enterCounter==0){
                      input = jTextField1.getText();
                        ClientWriting.manualScanner(input);
                        //ClientWriting.manualScanner("hej");
                        jTextField1.setText("");
                        jLabel1.setVisible(false);
                        //jTextArea1.append(input);
                        //ClientWriting.waitingForGuiInput = false;
                        //System.out.println(ClientWriting.waitingForGuiInput);


                        exec = Executors.newFixedThreadPool(2);
                    Socket clientSocket;

                    try {

                        clientSocket = new Socket();
                        clientSocket.connect(new InetSocketAddress("46.101.255.231", 8081));
                        //clientSocket.connect(new InetSocketAddress("localhost", 8081));

                        //Threads handling ClientWritter and ClientReading
                        ClientWriting.active = true;



                        clientreading = new ClientReading(client, clientSocket);
                        clientreading.addObserver(this);
                        exec.execute(clientreading); 

                        clientwriting = new ClientWriting(client, clientSocket);
                        exec.execute(clientwriting);
                        enterCounter++;
                        //exec.shutdown();
                          //  exec.awaitTermination(2,TimeUnit.SECONDS);
                            /*
                            switch(input){
                            case "/whisper":{

                            try{
                            JOptionPane.showInputDialog("Type who you want to");
                            }
                            catch (Exception ex){    
                            jTextArea1.setText("Something went wrong maybe you typed the wrong IP adress?");
                            }
                            break;
                            }
                            default:
                            if (input.length() > 0) {
                            try {
                            client.sendMessage("MSG#" + "ALL" + "#" + input);
                            } catch (Exception ex) {
                            jTextArea1.setText("Something went wrong with sending message");
                            }
                            }
                            break;
                            }
                            */


            //            while (active == true) {
            //
            //
            //                if (jTextField1.("/whisper")) {
            //
            //                    String[] split = jTextField1.split(" ", 3);
            //
            //                    sendMessage("MSG#" + split[1] + "#" + "[Private]" + split[2]);
            //
            //                } else if (jTextField1.equalsIgnoreCase("/quit")) {
            //
            //                    active = false;
            //
            //                } else if (jTextField1.equalsIgnoreCase("/list")) {
            //
            //                } else {
            //
            //                    sendMessage("MSG#ALL#" + jTextField1);
            //
            //                }
            //
            //            }
            //
            //            System.out.println("DISCONNECTED");
            //
            //        } catch (IOException ex) {
            //            
            //            Logger.getLogger(newGuiSender.class.getName()).log(Level.SEVERE, null, ex);
            //            
            //        }
                        } catch (Exception ex) {
                            ex.printStackTrace();
                            System.out.println("exception......");
                        }
            }
            else if(enterCounter>0){
                input = jTextField1.getText();
                //System.out.println(input);
                ClientWriting.manualScanner(input);
                        //ClientWriting.manualScanner("hej");
                        jTextField1.setText("");
                        ClientWriting.waitingForGuiInput = false;
            }
            
            
            
            
            
      
        
        }
        
    }//GEN-LAST:event_EnterButtonPerformed
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                newGui cg = new newGui();
                cg.setVisible(true);
                cg.jTextField1.requestFocus();
            }
        });
        Client client = new Client("46.101.255.231", 8081);
        //Client client = new Client("localhost", 8081);
                      
        ClientWriting.GuiOn();
        
        
        //System.out.println(ClientWriting.isGuiOn());
        //Client client = new Client("localhost", 8081);
        
            
   
        
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    
    @Override
    public void update(Observable o, Object arg) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        jTextArea1.append("\n"+arg.toString());
    }
}
